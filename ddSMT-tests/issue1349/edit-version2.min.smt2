(set-option :produce-unsat-cores true)
(set-logic ALL)
(declare-fun _substvar_28782_ () Bool)
(declare-fun _substvar_29090_ () Bool)
(declare-fun _substvar_28607_ () Bool)
(declare-fun _substvar_27889_ () Int)
(declare-fun _substvar_15887_ () Bool)
(declare-fun _substvar_27744_ () Int)
(define-fun __node_trans_DRAGON_0 ((DRAGON.usr.e01@1 Bool) (DRAGON.usr.e02@1 Bool) (DRAGON.usr.e03@1 Bool) (DRAGON.usr.e04@1 Bool) (DRAGON.usr.e05@1 Bool) (DRAGON.usr.e06@1 Bool) (DRAGON.usr.e07@1 Bool) (DRAGON.usr.e08@1 Bool) (DRAGON.usr.e09@1 Bool) (DRAGON.usr.e10@1 Bool) (DRAGON.usr.e11@1 Bool) (DRAGON.usr.e12@1 Bool) (DRAGON.usr.init_invalid@1 Int) (DRAGON.res.nondet_30 Int) (DRAGON.res.nondet_29 Int) (DRAGON.res.nondet_28 Int) (DRAGON.res.nondet_27 Int) (DRAGON.res.nondet_26 Int) (DRAGON.res.nondet_25 Int) (DRAGON.res.nondet_24 Int) (DRAGON.res.nondet_23 Int) (DRAGON.res.nondet_22 Int) (DRAGON.res.nondet_21 Int) (DRAGON.res.nondet_20 Int) (DRAGON.res.nondet_19 Int) (DRAGON.res.nondet_18 Int) (DRAGON.res.nondet_17 Int) (DRAGON.res.nondet_16 Int) (DRAGON.res.nondet_15 Int) (DRAGON.res.nondet_14 Int) (DRAGON.res.nondet_13 Int) (DRAGON.res.nondet_12 Int) (DRAGON.res.nondet_11 Int) (DRAGON.res.nondet_10 Int) (DRAGON.res.nondet_9 Int) (DRAGON.res.nondet_8 Int) (DRAGON.res.nondet_7 Int) (DRAGON.res.nondet_6 Int) (DRAGON.res.nondet_5 Int) (DRAGON.res.nondet_4 Int) (DRAGON.res.nondet_3 Int) (DRAGON.res.nondet_2 Int) (DRAGON.res.nondet_1 Int) (DRAGON.res.nondet_0 Int) (DRAGON.usr.exclusive@1 Int) (DRAGON.usr.shared@1 Int) (DRAGON.usr.shared_dirty@1 Int) (DRAGON.usr.dirty@1 Int) (DRAGON.usr.invalid@1 Int) (DRAGON.usr.erreur@1 Bool) (DRAGON.res.init_flag@1 Bool) (DRAGON.impl.usr.mem_init@1 Int) (DRAGON.usr.e01@0 Bool) (DRAGON.usr.e02@0 Bool) (DRAGON.usr.e03@0 Bool) (DRAGON.usr.e04@0 Bool) (DRAGON.usr.e05@0 Bool) (DRAGON.usr.e06@0 Bool) (DRAGON.usr.e07@0 Bool) (DRAGON.usr.e08@0 Bool) (DRAGON.usr.e09@0 Bool) (DRAGON.usr.e10@0 Bool) (DRAGON.usr.e11@0 Bool) (DRAGON.usr.e12@0 Bool) (DRAGON.usr.init_invalid@0 Int) (DRAGON.usr.exclusive@0 Int) (DRAGON.usr.shared@0 Int) (DRAGON.usr.shared_dirty@0 Int) (DRAGON.usr.dirty@0 Int) (DRAGON.usr.invalid@0 Int) (DRAGON.usr.erreur@0 Bool) (DRAGON.res.init_flag@0 Bool) (DRAGON.impl.usr.mem_init@0 Int)) Bool (= DRAGON.usr.shared@1 (ite DRAGON.usr.e06@1 DRAGON.usr.shared@0 (ite DRAGON.usr.e08@1 0 (- DRAGON.usr.shared@0 1)))))
(define-fun __node_trans_excludes12_0 ((excludes12.usr.X1@1 Bool) (excludes12.usr.X2@1 Bool) (excludes12.usr.X3@1 Bool) (excludes12.usr.X4@1 Bool) (excludes12.usr.X5@1 Bool) (excludes12.usr.X6@1 Bool) (excludes12.usr.X7@1 Bool) (excludes12.usr.X8@1 Bool) (excludes12.usr.X9@1 Bool) (excludes12.usr.X10@1 Bool) (excludes12.usr.X11@1 Bool) (excludes12.usr.X12@1 Bool) (excludes12.usr.excludes@1 Bool) (excludes12.res.init_flag@1 Bool) (excludes12.usr.X1@0 Bool) (excludes12.usr.X2@0 Bool) (excludes12.usr.X3@0 Bool) (excludes12.usr.X4@0 Bool) (excludes12.usr.X5@0 Bool) (excludes12.usr.X6@0 Bool) (excludes12.usr.X7@0 Bool) (excludes12.usr.X8@0 Bool) (excludes12.usr.X9@0 Bool) (excludes12.usr.X10@0 Bool) (excludes12.usr.X11@0 Bool) (excludes12.usr.X12@0 Bool) (excludes12.usr.excludes@0 Bool) (excludes12.res.init_flag@0 Bool)) Bool (= true (or (or (not excludes12.usr.X8@1) excludes12.usr.X6@1) (and (not excludes12.usr.X8@1) _substvar_15887_))))
(assert (let ((X2 _substvar_27744_)) (and true (= _substvar_28782_ (=> true (<= X2 0))) (__node_trans_DRAGON_0 true true true true false _substvar_29090_ false _substvar_28607_ false false false false 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 _substvar_27744_ 0 0 0 false false 0 true true true true true true true true true true true true 0 0 _substvar_27889_ 0 0 0 true true 0) true (__node_trans_excludes12_0 true true true true false _substvar_29090_ false _substvar_28607_ false false false false true false true true true true true true true true true true true true true true) true true)))
(assert (=> true (not (> (+ (* 1 _substvar_27889_) 0) 0))))
(push 1)
(check-sat)
(pop 1)
(assert (=> true (not (> (+ 0 (* 1 _substvar_27889_) 0 2) 0))))
(assert (=> true (= (+ 0 (* 1 _substvar_27744_) 1) 0)))
(check-sat)
(get-unsat-core)

