# -*- coding: utf-8 -*-
#
import inspect
import os
import subprocess
import sys

# add project root path
__root_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), '..')
sys.path.insert(0, __root_dir)

import ddsmt.version  # noqa: E402

# make sure we can see the last tag
subprocess.call(['git', 'fetch'])

# basic project information
project = 'ddSMT'
copyright = '2013-2021, the authors of ddSMT'
author = 'The authors of ddSMT'
version = ddsmt.version.VERSION
release = ddsmt.version.VERSION

extensions = [
    'sphinx_rtd_theme',
    'sphinx.ext.autodoc',
    'sphinx.ext.autosectionlabel',
    'sphinxcontrib.bibtex',
    'sphinxcontrib.programoutput',
]

bibtex_bibfiles = ['literature.bib']

autodoc_default_options = {
    'members': None,
    'member-order': 'bysource',
}

# Add any paths that contain templates here, relative to this directory.
templates_path = ['templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = ['build', 'Thumbs.db', '.DS_Store']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = None

# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'sphinx_rtd_theme'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
html_theme_options = {
    'display_version': True,
    'collapse_navigation': False,
    'sticky_navigation': True,
}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = []

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}

# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'pydoc'


def autodoc_mutators_skip_member(app, what, name, obj, skip, options):
    if what == 'module':
        if hasattr(
                obj,
                '__module__') and obj.__module__.startswith('ddsmt.mutators_'):
            return not inspect.isclass(obj)
    return skip


def setup(app):
    app.connect('autodoc-skip-member', autodoc_mutators_skip_member)

# Allow to use "ddsmt" in "command-output" directives.
os.environ['PATH'] = os.path.join(__root_dir, "bin") + os.pathsep + os.environ['PATH']
